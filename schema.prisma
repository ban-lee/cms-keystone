// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(uuid()) @postgresql.Uuid
  name      String    @default("")
  email     String    @unique @default("")
  password  String
  isAdmin   Boolean   @default(false)
  createdAt DateTime? @default(now())
}

model Event {
  id             String              @id @default(uuid()) @postgresql.Uuid
  name           String              @default("")
  createdDate    DateTime?           @default(now())
  materials      Material[]          @relation("Event_materials")
  headerImg      Json?
  topColour      String              @default("")
  days           Int?
  cnStart        DateTime?           @postgresql.Date
  estimatedStart DateTime?           @postgresql.Date
  enStart        DateTime?
  enEnd          DateTime?
  freeOp         Operator?           @relation("Event_freeOp", fields: [freeOpId], references: [id])
  freeOpId       String?             @map("freeOp") @postgresql.Uuid
  bannerType     EventBannerTypeType
  bannerOp       Operator[]          @relation("Event_bannerOp")
  freeSkin       Skin?               @relation("Event_freeSkin", fields: [freeSkinId], references: [id])
  freeSkinId     String?             @map("freeSkin") @postgresql.Uuid
  newSkin        Skin[]              @relation("Event_newSkin")
  rerunSkin      Skin[]              @relation("Event_rerunSkin")
  fashionReview  Boolean             @default(false)

  @@index([freeOpId])
  @@index([freeSkinId])
}

model GachaBanner {
  id          String              @id @default(uuid()) @postgresql.Uuid
  name        String              @default("")
  type        GachaBannerTypeType
  description String              @default("")
  rateUpOps   Operator[]          @relation("Operator_banners")
}

model Material {
  id                   String              @id @default(uuid()) @postgresql.Uuid
  name                 String              @unique @default("")
  rarity               MaterialRarityType? @default(t1)
  itemId               String              @default("")
  sortId               String              @default("")
  imgId                String              @default("")
  from_Event_materials Event[]             @relation("Event_materials")
}

model Operator {
  id                  String                 @id @default(uuid()) @postgresql.Uuid
  name                String                 @unique @default("")
  searchableName      String                 @default("")
  rarity              Int                    @default(1)
  class               OperatorClassType?
  archetype           OperatorArchetypeType?
  charId              String                 @default("")
  skins               Skin[]                 @relation("Skin_operator")
  banners             GachaBanner?           @relation("Operator_banners", fields: [bannersId], references: [id])
  bannersId           String?                @map("banners") @postgresql.Uuid
  from_Event_freeOp   Event[]                @relation("Event_freeOp")
  from_Event_bannerOp Event[]                @relation("Event_bannerOp")

  @@index([bannersId])
}

model Skin {
  id                   String    @id @default(uuid()) @postgresql.Uuid
  name                 String    @unique @default("")
  brand                String?
  operator             Operator? @relation("Skin_operator", fields: [operatorId], references: [id])
  operatorId           String?   @map("operator") @postgresql.Uuid
  skinId               String    @default("")
  charId               String    @default("")
  imgId                String    @default("")
  label                String    @default("")
  from_Event_freeSkin  Event[]   @relation("Event_freeSkin")
  from_Event_newSkin   Event[]   @relation("Event_newSkin")
  from_Event_rerunSkin Event[]   @relation("Event_rerunSkin")

  @@index([operatorId])
}

enum EventBannerTypeType {
  single
  limited
  spcollab
  jointop
  none
}

enum GachaBannerTypeType {
  single
  limited
  collab
  jointop
  warmup
}

enum MaterialRarityType {
  t1
  t2
  t3
  t4
  t5
  t6
}

enum OperatorClassType {
  vanguard
  guard
  defender
  sniper
  caster
  medic
  supporter
  specialist
}

enum OperatorArchetypeType {
  abjurer
  agent
  ambusher
  artificer
  artilleryman
  artsfighter
  artsprotector
  bard
  besieger
  blastcaster
  centurion
  chaincaster
  chainhealer
  charger
  corecaster
  crusher
  deadeye
  decelbinder
  dollkeeper
  dreadnought
  duelist
  executor
  fighter
  flinger
  fortress
  geek
  guardian
  heavyshooter
  hexer
  hookmaster
  incantationmedic
  instructor
  juggernaut
  liberator
  lord
  marksman
  mechaccord
  medic
  merchant
  multitargetmedic
  musha
  mysticcaster
  phalanxcaster
  pioneer
  protector
  pushstroker
  reaper
  sacrificialspecialist
  splashcaster
  spreadshooter
  standardbearer
  summoner
  swordmaster
  tactician
  therapist
  trapmaster
  wanderingmedic
}
