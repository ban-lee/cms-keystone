# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type Event {
  id: ID!
  name: String
  createdDate: DateTime
  materials(where: MaterialWhereInput! = {}, orderBy: [MaterialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MaterialWhereUniqueInput): [Material!]
  materialsCount(where: MaterialWhereInput! = {}): Int
  headerImg: CloudinaryImage_File
  topColour: String
  days: Int
  cnStart: CalendarDay
  estimatedStart: CalendarDay
  enStart: DateTime
  enEnd: DateTime
  freeOp: Operator
  bannerType: EventBannerTypeType
  bannerOp(where: OperatorWhereInput! = {}, orderBy: [OperatorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatorWhereUniqueInput): [Operator!]
  bannerOpCount(where: OperatorWhereInput! = {}): Int
  freeSkin: Skin
  newSkin(where: SkinWhereInput! = {}, orderBy: [SkinOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkinWhereUniqueInput): [Skin!]
  newSkinCount(where: SkinWhereInput! = {}): Int
  rerunSkin(where: SkinWhereInput! = {}, orderBy: [SkinOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkinWhereUniqueInput): [Skin!]
  rerunSkinCount(where: SkinWhereInput! = {}): Int
  fashionReview: Boolean
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum EventBannerTypeType {
  single
  limited
  spcollab
  jointop
  none
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  createdDate: DateTimeNullableFilter
  materials: MaterialManyRelationFilter
  topColour: StringFilter
  days: IntNullableFilter
  cnStart: CalendarDayNullableFilter
  estimatedStart: CalendarDayNullableFilter
  enStart: DateTimeNullableFilter
  enEnd: DateTimeNullableFilter
  freeOp: OperatorWhereInput
  bannerType: EventBannerTypeTypeNullableFilter
  bannerOp: OperatorManyRelationFilter
  freeSkin: SkinWhereInput
  newSkin: SkinManyRelationFilter
  rerunSkin: SkinManyRelationFilter
  fashionReview: BooleanFilter
}

input MaterialManyRelationFilter {
  every: MaterialWhereInput
  some: MaterialWhereInput
  none: MaterialWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input EventBannerTypeTypeNullableFilter {
  equals: EventBannerTypeType
  in: [EventBannerTypeType!]
  notIn: [EventBannerTypeType!]
  not: EventBannerTypeTypeNullableFilter
}

input OperatorManyRelationFilter {
  every: OperatorWhereInput
  some: OperatorWhereInput
  none: OperatorWhereInput
}

input SkinManyRelationFilter {
  every: SkinWhereInput
  some: SkinWhereInput
  none: SkinWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdDate: OrderDirection
  topColour: OrderDirection
  days: OrderDirection
  cnStart: OrderDirection
  estimatedStart: OrderDirection
  enStart: OrderDirection
  enEnd: OrderDirection
  bannerType: OrderDirection
  fashionReview: OrderDirection
}

input EventUpdateInput {
  name: String
  createdDate: DateTime
  materials: MaterialRelateToManyForUpdateInput
  headerImg: Upload
  topColour: String
  days: Int
  cnStart: CalendarDay
  estimatedStart: CalendarDay
  enStart: DateTime
  enEnd: DateTime
  freeOp: OperatorRelateToOneForUpdateInput
  bannerType: EventBannerTypeType
  bannerOp: OperatorRelateToManyForUpdateInput
  freeSkin: SkinRelateToOneForUpdateInput
  newSkin: SkinRelateToManyForUpdateInput
  rerunSkin: SkinRelateToManyForUpdateInput
  fashionReview: Boolean
}

input MaterialRelateToManyForUpdateInput {
  disconnect: [MaterialWhereUniqueInput!]
  set: [MaterialWhereUniqueInput!]
  create: [MaterialCreateInput!]
  connect: [MaterialWhereUniqueInput!]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input OperatorRelateToOneForUpdateInput {
  create: OperatorCreateInput
  connect: OperatorWhereUniqueInput
  disconnect: Boolean
}

input OperatorRelateToManyForUpdateInput {
  disconnect: [OperatorWhereUniqueInput!]
  set: [OperatorWhereUniqueInput!]
  create: [OperatorCreateInput!]
  connect: [OperatorWhereUniqueInput!]
}

input SkinRelateToOneForUpdateInput {
  create: SkinCreateInput
  connect: SkinWhereUniqueInput
  disconnect: Boolean
}

input SkinRelateToManyForUpdateInput {
  disconnect: [SkinWhereUniqueInput!]
  set: [SkinWhereUniqueInput!]
  create: [SkinCreateInput!]
  connect: [SkinWhereUniqueInput!]
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  createdDate: DateTime
  materials: MaterialRelateToManyForCreateInput
  headerImg: Upload
  topColour: String
  days: Int
  cnStart: CalendarDay
  estimatedStart: CalendarDay
  enStart: DateTime
  enEnd: DateTime
  freeOp: OperatorRelateToOneForCreateInput
  bannerType: EventBannerTypeType
  bannerOp: OperatorRelateToManyForCreateInput
  freeSkin: SkinRelateToOneForCreateInput
  newSkin: SkinRelateToManyForCreateInput
  rerunSkin: SkinRelateToManyForCreateInput
  fashionReview: Boolean
}

input MaterialRelateToManyForCreateInput {
  create: [MaterialCreateInput!]
  connect: [MaterialWhereUniqueInput!]
}

input OperatorRelateToOneForCreateInput {
  create: OperatorCreateInput
  connect: OperatorWhereUniqueInput
}

input OperatorRelateToManyForCreateInput {
  create: [OperatorCreateInput!]
  connect: [OperatorWhereUniqueInput!]
}

input SkinRelateToOneForCreateInput {
  create: SkinCreateInput
  connect: SkinWhereUniqueInput
}

input SkinRelateToManyForCreateInput {
  create: [SkinCreateInput!]
  connect: [SkinWhereUniqueInput!]
}

type GachaBanner {
  id: ID!
  name: String
  type: GachaBannerTypeType
  description: String
  rateUpOps(where: OperatorWhereInput! = {}, orderBy: [OperatorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatorWhereUniqueInput): [Operator!]
  rateUpOpsCount(where: OperatorWhereInput! = {}): Int
}

enum GachaBannerTypeType {
  single
  limited
  collab
  jointop
  warmup
}

input GachaBannerWhereUniqueInput {
  id: ID
}

input GachaBannerWhereInput {
  AND: [GachaBannerWhereInput!]
  OR: [GachaBannerWhereInput!]
  NOT: [GachaBannerWhereInput!]
  id: IDFilter
  name: StringFilter
  type: GachaBannerTypeTypeNullableFilter
  description: StringFilter
  rateUpOps: OperatorManyRelationFilter
}

input GachaBannerTypeTypeNullableFilter {
  equals: GachaBannerTypeType
  in: [GachaBannerTypeType!]
  notIn: [GachaBannerTypeType!]
  not: GachaBannerTypeTypeNullableFilter
}

input GachaBannerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  description: OrderDirection
}

input GachaBannerUpdateInput {
  name: String
  type: GachaBannerTypeType
  description: String
  rateUpOps: OperatorRelateToManyForUpdateInput
}

input GachaBannerUpdateArgs {
  where: GachaBannerWhereUniqueInput!
  data: GachaBannerUpdateInput!
}

input GachaBannerCreateInput {
  name: String
  type: GachaBannerTypeType
  description: String
  rateUpOps: OperatorRelateToManyForCreateInput
}

type Material {
  id: ID!
  name: String
  rarity: MaterialRarityType
  itemId: String
  sortId: String
  imgId: String
}

enum MaterialRarityType {
  t1
  t2
  t3
  t4
  t5
  t6
}

input MaterialWhereUniqueInput {
  id: ID
  name: String
}

input MaterialWhereInput {
  AND: [MaterialWhereInput!]
  OR: [MaterialWhereInput!]
  NOT: [MaterialWhereInput!]
  id: IDFilter
  name: StringFilter
  rarity: MaterialRarityTypeNullableFilter
  itemId: StringFilter
  sortId: StringFilter
  imgId: StringFilter
}

input MaterialRarityTypeNullableFilter {
  equals: MaterialRarityType
  in: [MaterialRarityType!]
  notIn: [MaterialRarityType!]
  not: MaterialRarityTypeNullableFilter
}

input MaterialOrderByInput {
  id: OrderDirection
  name: OrderDirection
  rarity: OrderDirection
  itemId: OrderDirection
  sortId: OrderDirection
  imgId: OrderDirection
}

input MaterialUpdateInput {
  name: String
  rarity: MaterialRarityType
  itemId: String
  sortId: String
  imgId: String
}

input MaterialUpdateArgs {
  where: MaterialWhereUniqueInput!
  data: MaterialUpdateInput!
}

input MaterialCreateInput {
  name: String
  rarity: MaterialRarityType
  itemId: String
  sortId: String
  imgId: String
}

type Operator {
  id: ID!
  name: String
  searchableName: String
  rarity: Int
  class: OperatorClassType
  archetype: OperatorArchetypeType
  charId: String
  skins(where: SkinWhereInput! = {}, orderBy: [SkinOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkinWhereUniqueInput): [Skin!]
  skinsCount(where: SkinWhereInput! = {}): Int
  banners: GachaBanner
}

enum OperatorClassType {
  vanguard
  guard
  defender
  sniper
  caster
  medic
  supporter
  specialist
}

enum OperatorArchetypeType {
  abjurer
  agent
  ambusher
  artificer
  artilleryman
  artsfighter
  artsprotector
  bard
  besieger
  blastcaster
  centurion
  chaincaster
  chainhealer
  charger
  corecaster
  crusher
  deadeye
  decelbinder
  dollkeeper
  dreadnought
  duelist
  executor
  fighter
  flinger
  fortress
  geek
  guardian
  heavyshooter
  hexer
  hookmaster
  incantationmedic
  instructor
  juggernaut
  liberator
  lord
  marksman
  mechaccord
  medic
  merchant
  multitargetmedic
  musha
  mysticcaster
  phalanxcaster
  pioneer
  protector
  pushstroker
  reaper
  sacrificialspecialist
  sentinelprotector
  splashcaster
  spreadshooter
  standardbearer
  summoner
  swordmaster
  tactician
  therapist
  trapmaster
  wanderingmedic
  hunter
  loopshooter
  ritualist
  primcaster
}

input OperatorWhereUniqueInput {
  id: ID
  name: String
}

input OperatorWhereInput {
  AND: [OperatorWhereInput!]
  OR: [OperatorWhereInput!]
  NOT: [OperatorWhereInput!]
  id: IDFilter
  name: StringFilter
  searchableName: StringFilter
  rarity: IntFilter
  class: OperatorClassTypeNullableFilter
  archetype: OperatorArchetypeTypeNullableFilter
  charId: StringFilter
  skins: SkinManyRelationFilter
  banners: GachaBannerWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input OperatorClassTypeNullableFilter {
  equals: OperatorClassType
  in: [OperatorClassType!]
  notIn: [OperatorClassType!]
  not: OperatorClassTypeNullableFilter
}

input OperatorArchetypeTypeNullableFilter {
  equals: OperatorArchetypeType
  in: [OperatorArchetypeType!]
  notIn: [OperatorArchetypeType!]
  not: OperatorArchetypeTypeNullableFilter
}

input OperatorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  searchableName: OrderDirection
  rarity: OrderDirection
  class: OrderDirection
  archetype: OrderDirection
  charId: OrderDirection
}

input OperatorUpdateInput {
  name: String
  searchableName: String
  rarity: Int
  class: OperatorClassType
  archetype: OperatorArchetypeType
  charId: String
  skins: SkinRelateToManyForUpdateInput
  banners: GachaBannerRelateToOneForUpdateInput
}

input GachaBannerRelateToOneForUpdateInput {
  create: GachaBannerCreateInput
  connect: GachaBannerWhereUniqueInput
  disconnect: Boolean
}

input OperatorUpdateArgs {
  where: OperatorWhereUniqueInput!
  data: OperatorUpdateInput!
}

input OperatorCreateInput {
  name: String
  searchableName: String
  rarity: Int
  class: OperatorClassType
  archetype: OperatorArchetypeType
  charId: String
  skins: SkinRelateToManyForCreateInput
  banners: GachaBannerRelateToOneForCreateInput
}

input GachaBannerRelateToOneForCreateInput {
  create: GachaBannerCreateInput
  connect: GachaBannerWhereUniqueInput
}

type Skin {
  id: ID!
  name: String
  brand: String
  operator: Operator
  skinId: String
  charId: String
  imgId: String
  label: String
}

input SkinWhereUniqueInput {
  id: ID
  name: String
}

input SkinWhereInput {
  AND: [SkinWhereInput!]
  OR: [SkinWhereInput!]
  NOT: [SkinWhereInput!]
  id: IDFilter
  name: StringFilter
  brand: StringNullableFilter
  operator: OperatorWhereInput
  skinId: StringFilter
  charId: StringFilter
  imgId: StringFilter
  label: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input SkinOrderByInput {
  id: OrderDirection
  name: OrderDirection
  brand: OrderDirection
  skinId: OrderDirection
  charId: OrderDirection
  imgId: OrderDirection
  label: OrderDirection
}

input SkinUpdateInput {
  name: String
  brand: String
  operator: OperatorRelateToOneForUpdateInput
  skinId: String
  charId: String
  imgId: String
  label: String
}

input SkinUpdateArgs {
  where: SkinWhereUniqueInput!
  data: SkinUpdateInput!
}

input SkinCreateInput {
  name: String
  brand: String
  operator: OperatorRelateToOneForCreateInput
  skinId: String
  charId: String
  imgId: String
  label: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createGachaBanner(data: GachaBannerCreateInput!): GachaBanner
  createGachaBanners(data: [GachaBannerCreateInput!]!): [GachaBanner]
  updateGachaBanner(where: GachaBannerWhereUniqueInput!, data: GachaBannerUpdateInput!): GachaBanner
  updateGachaBanners(data: [GachaBannerUpdateArgs!]!): [GachaBanner]
  deleteGachaBanner(where: GachaBannerWhereUniqueInput!): GachaBanner
  deleteGachaBanners(where: [GachaBannerWhereUniqueInput!]!): [GachaBanner]
  createMaterial(data: MaterialCreateInput!): Material
  createMaterials(data: [MaterialCreateInput!]!): [Material]
  updateMaterial(where: MaterialWhereUniqueInput!, data: MaterialUpdateInput!): Material
  updateMaterials(data: [MaterialUpdateArgs!]!): [Material]
  deleteMaterial(where: MaterialWhereUniqueInput!): Material
  deleteMaterials(where: [MaterialWhereUniqueInput!]!): [Material]
  createOperator(data: OperatorCreateInput!): Operator
  createOperators(data: [OperatorCreateInput!]!): [Operator]
  updateOperator(where: OperatorWhereUniqueInput!, data: OperatorUpdateInput!): Operator
  updateOperators(data: [OperatorUpdateArgs!]!): [Operator]
  deleteOperator(where: OperatorWhereUniqueInput!): Operator
  deleteOperators(where: [OperatorWhereUniqueInput!]!): [Operator]
  createSkin(data: SkinCreateInput!): Skin
  createSkins(data: [SkinCreateInput!]!): [Skin]
  updateSkin(where: SkinWhereUniqueInput!, data: SkinUpdateInput!): Skin
  updateSkins(data: [SkinUpdateArgs!]!): [Skin]
  deleteSkin(where: SkinWhereUniqueInput!): Skin
  deleteSkins(where: [SkinWhereUniqueInput!]!): [Skin]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  gachaBanners(where: GachaBannerWhereInput! = {}, orderBy: [GachaBannerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GachaBannerWhereUniqueInput): [GachaBanner!]
  gachaBanner(where: GachaBannerWhereUniqueInput!): GachaBanner
  gachaBannersCount(where: GachaBannerWhereInput! = {}): Int
  materials(where: MaterialWhereInput! = {}, orderBy: [MaterialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MaterialWhereUniqueInput): [Material!]
  material(where: MaterialWhereUniqueInput!): Material
  materialsCount(where: MaterialWhereInput! = {}): Int
  operators(where: OperatorWhereInput! = {}, orderBy: [OperatorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatorWhereUniqueInput): [Operator!]
  operator(where: OperatorWhereUniqueInput!): Operator
  operatorsCount(where: OperatorWhereInput! = {}): Int
  skins(where: SkinWhereInput! = {}, orderBy: [SkinOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkinWhereUniqueInput): [Skin!]
  skin(where: SkinWhereUniqueInput!): Skin
  skinsCount(where: SkinWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
